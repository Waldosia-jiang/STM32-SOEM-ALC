<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\SOEM_STM32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\SOEM_STM32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 31 00:42:45 2024
<BR><P>
<H3>Maximum Stack Usage =       1908 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; simpletest &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[62]">Servosetup</a> from main.o(i.Servosetup) referenced from main.o(i.simpletest)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from main.o(i.TIM3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from timer.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from timer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from rs485.o(i.UART4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[61]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[60]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5d]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[14d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[150]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_peek
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[118]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[157]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[158]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[159]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[15b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[15c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>Debug_USART_Config</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, bsp_debug_usart.o(i.Debug_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Delay_ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_systick.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[149]"></a>Delay_us</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_systick.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
</UL>

<P><STRONG><a name="[83]"></a>ETH_BSP_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_BSP_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ETH_BSP_Config &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_CheckFrameReceived))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
</UL>

<P><STRONG><a name="[9a]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[145]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[99]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[144]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[8a]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[8d]"></a>ETH_Delay</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[8c]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_FlushTransmitFIFO &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[94]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[13c]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_Get_Received_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
</UL>

<P><STRONG><a name="[90]"></a>ETH_Init</STRONG> (Thumb, 596 bytes, Stack size 56 bytes, stm32f429_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[143]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[96]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACReceptionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[97]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f429_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[132]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f429_eth.o(i.ETH_Prepare_Transmit_Descriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pdo_outframe
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>

<P><STRONG><a name="[89]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f429_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[93]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[98]"></a>ETH_Start</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f429_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[95]"></a>ETH_StructInit</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f429_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[92]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f429_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcoinit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[87]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[85]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Key_GPIO_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_key.o(i.Key_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>LED_GPIO_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>MB_CRC16</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_mb_host.o(i.MB_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MB_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteNumHoldingReg_10H
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteHoldingReg_06H
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingReg_03H
</UL>

<P><STRONG><a name="[9e]"></a>MB_ReadHoldingReg_03H</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_mb_host.o(i.MB_ReadHoldingReg_03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_ReadHoldingReg_03H &rArr; RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CRC16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>MB_WriteHoldingReg_06H</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_mb_host.o(i.MB_WriteHoldingReg_06H))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MB_WriteHoldingReg_06H &rArr; RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CRC16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>MB_WriteNumHoldingReg_10H</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_mb_host.o(i.MB_WriteNumHoldingReg_10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MB_WriteNumHoldingReg_10H &rArr; RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CRC16
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcoinit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[8b]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[a4]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[91]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[147]"></a>RCC_MCO1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcoinit
</UL>

<P><STRONG><a name="[a3]"></a>RS485_Init</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, rs485.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RS485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>RS485_Receive_Data</STRONG> (Thumb, 668 bytes, Stack size 48 bytes, rs485.o(i.RS485_Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RS485_Receive_Data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_CRC16
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>RS485_Send_Data</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rs485.o(i.RS485_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteNumHoldingReg_10H
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteHoldingReg_06H
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingReg_03H
</UL>

<P><STRONG><a name="[ac]"></a>Remote_Control</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, timer.o(i.Remote_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Remote_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_limit_int
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(i.SYSCFG_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[62]"></a>Servosetup</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, main.o(i.Servosetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1524<LI>Call Chain = Servosetup &rArr; ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.simpletest)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>SysTick_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TIM3_IRQHandler &rArr; ecat_app &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_pdo_outframe
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, timer.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM8_CC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PolarityConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM8_Cap_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, timer.o(i.TIM8_Cap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM8_Cap_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, timer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; RS485_Receive_Data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteNumHoldingReg_10H
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_WriteHoldingReg_06H
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MB_ReadHoldingReg_03H
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
</UL>

<P><STRONG><a name="[b8]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>TimingDelay_Decrement</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_systick.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rs485.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[c7]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[aa]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[c5]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[80]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[c6]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Receive_Data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[160]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[161]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ca]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[162]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[163]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[164]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cd]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[cb]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[f8]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[d1]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[d0]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[cc]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[ce]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[165]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[166]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[167]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[13f]"></a>cycle_queue_create</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cycle_queue.o(i.cycle_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cycle_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_pdo_queue
</UL>

<P><STRONG><a name="[13d]"></a>cycle_queue_element_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cycle_queue.o(i.cycle_queue_element_count))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[d8]"></a>cycle_queue_peek</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cycle_queue.o(i.cycle_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cycle_queue_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_pop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pdo_outframe
</UL>

<P><STRONG><a name="[da]"></a>cycle_queue_pop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cycle_queue.o(i.cycle_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cycle_queue_pop &rArr; cycle_queue_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pdo_outframe
</UL>

<P><STRONG><a name="[133]"></a>cycle_queue_push_empty</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cycle_queue.o(i.cycle_queue_push_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cycle_queue_push_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[14a]"></a>ec_ALstatuscode2string</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ethercatprint.o(i.ec_ALstatuscode2string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ec_ALstatuscode2string
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[ae]"></a>ec_SDOwrite</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ethercatcoe.o(i.ec_SDOwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460<LI>Call Chain = ec_SDOwrite &rArr; ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servosetup
</UL>

<P><STRONG><a name="[dc]"></a>ec_clearmbx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_clearmbx))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[dd]"></a>ec_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_close))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_closenic
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[df]"></a>ec_config_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = ec_config_init &rArr; ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[e1]"></a>ec_config_map</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 1860<LI>Call Chain = ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[e2]"></a>ec_config_map_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatconfig.o(i.ec_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 1860<LI>Call Chain = ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
</UL>

<P><STRONG><a name="[e4]"></a>ec_configdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatdc.o(i.ec_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ec_configdc &rArr; ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[e6]"></a>ec_dcsync0</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ethercatdc.o(i.ec_dcsync0))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ec_dcsync0 &rArr; ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[117]"></a>ec_findconfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ethercatconfig.o(i.ec_findconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_findconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[e8]"></a>ec_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ec_init &rArr; ecx_init &rArr; ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[10c]"></a>ec_nextmbxcnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_nextmbxcnt))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[b7]"></a>ec_pdo_outframe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nicdrv.o(i.ec_pdo_outframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ec_pdo_outframe &rArr; ecx_pdo_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pdo_outframe
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>ec_readstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ec_readstate &rArr; ecx_readstate &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[f7]"></a>ec_receive_processdata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_receive_processdata))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
</UL>

<P><STRONG><a name="[ed]"></a>ec_receive_processdata_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_receive_processdata_group), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[b6]"></a>ec_send_processdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_send_processdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_app
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>ec_send_processdata_group</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_send_processdata_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ec_send_processdata_group &rArr; ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
</UL>

<P><STRONG><a name="[f1]"></a>ec_set_pdo_queue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nicdrv.o(i.ec_set_pdo_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ec_set_pdo_queue &rArr; ecx_set_pdo_queue &rArr; cycle_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_pdo_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[140]"></a>ec_setupheader</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nicdrv.o(i.ec_setupheader))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[f3]"></a>ec_statecheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ec_statecheck &rArr; ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[f5]"></a>ec_writestate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ec_writestate))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ec_writestate &rArr; ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
</UL>

<P><STRONG><a name="[b4]"></a>ecat_app</STRONG> (Thumb, 3936 bytes, Stack size 144 bytes, main.o(i.ecat_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ecat_app &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_pdo_outframe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>ecx_APRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
</UL>

<P><STRONG><a name="[ff]"></a>ecx_APRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_APRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ecx_APRDw &rArr; ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[100]"></a>ecx_APWR</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_APWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
</UL>

<P><STRONG><a name="[101]"></a>ecx_APWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_APWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ecx_APWRw &rArr; ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[102]"></a>ecx_BRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_BRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[103]"></a>ecx_BWR</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_BWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[104]"></a>ecx_FPRD</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[105]"></a>ecx_FPRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_FPRDw))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ecx_FPRDw &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[106]"></a>ecx_FPWR</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, ethercatbase.o(i.ecx_FPWR))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[107]"></a>ecx_FPWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(i.ecx_FPWRw))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[108]"></a>ecx_SDOerror</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ethercatcoe.o(i.ecx_SDOerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecx_SDOerror &rArr; ecx_pusherror
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>

<P><STRONG><a name="[10a]"></a>ecx_SDOread</STRONG> (Thumb, 710 bytes, Stack size 1088 bytes, ethercatcoe.o(i.ecx_SDOread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
</UL>

<P><STRONG><a name="[db]"></a>ecx_SDOwrite</STRONG> (Thumb, 884 bytes, Stack size 1088 bytes, ethercatcoe.o(i.ecx_SDOwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1428<LI>Call Chain = ecx_SDOwrite &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_SDOwrite
</UL>

<P><STRONG><a name="[10f]"></a>ecx_SoEerror</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ethercatsoe.o(i.ecx_SoEerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecx_SoEerror &rArr; ecx_pusherror
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[110]"></a>ecx_SoEread</STRONG> (Thumb, 410 bytes, Stack size 1080 bytes, ethercatsoe.o(i.ecx_SoEread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1420<LI>Call Chain = ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_nextmbxcnt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
</UL>

<P><STRONG><a name="[111]"></a>ecx_adddatagram</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ethercatbase.o(i.ecx_adddatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_adddatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[de]"></a>ecx_closenic</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_closenic))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_close
</UL>

<P><STRONG><a name="[e0]"></a>ecx_config_init</STRONG> (Thumb, 2852 bytes, Stack size 144 bytes, ethercatconfig.o(i.ecx_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_findconfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
</UL>

<P><STRONG><a name="[e3]"></a>ecx_config_map_group</STRONG> (Thumb, 3584 bytes, Stack size 232 bytes, ethercatconfig.o(i.ecx_config_map_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 1860<LI>Call Chain = ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readIDNmap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>

<P><STRONG><a name="[e5]"></a>ecx_configdc</STRONG> (Thumb, 1022 bytes, Stack size 96 bytes, ethercatdc.o(i.ecx_configdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_prevport
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_porttime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_parentport
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
</UL>

<P><STRONG><a name="[e7]"></a>ecx_dcsync0</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, ethercatdc.o(i.ecx_dcsync0))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_getSysTime_us
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
</UL>

<P><STRONG><a name="[128]"></a>ecx_eeprom2master</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2master))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ecx_eeprom2master &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
</UL>

<P><STRONG><a name="[123]"></a>ecx_eeprom2pdi</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom2pdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ecx_eeprom2pdi &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[129]"></a>ecx_eeprom_waitnotbusyFP</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_eeprom_waitnotbusyFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[fb]"></a>ecx_getindex</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nicdrv.o(i.ecx_getindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[12d]"></a>ecx_inframe</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_inframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recvpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[e9]"></a>ecx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(i.ecx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecx_init &rArr; ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
</UL>

<P><STRONG><a name="[130]"></a>ecx_mbxempty</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_mbxempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
</UL>

<P><STRONG><a name="[10b]"></a>ecx_mbxreceive</STRONG> (Thumb, 506 bytes, Stack size 104 bytes, ethercatmain.o(i.ecx_mbxreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[10d]"></a>ecx_mbxsend</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ethercatmain.o(i.ecx_mbxsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ecx_mbxsend &rArr; ecx_mbxempty &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[131]"></a>ecx_outframe</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_outframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ecx_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_push_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>

<P><STRONG><a name="[134]"></a>ecx_outframe_red</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_outframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ecx_outframe_red &rArr; ecx_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[10e]"></a>ecx_packeterror</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_packeterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecx_packeterror &rArr; ecx_pusherror
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOwrite
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>

<P><STRONG><a name="[ea]"></a>ecx_pdo_outframe</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nicdrv.o(i.ecx_pdo_outframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ecx_pdo_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_pop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_pdo_outframe
</UL>

<P><STRONG><a name="[109]"></a>ecx_pusherror</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ethercatmain.o(i.ecx_pusherror))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecx_pusherror
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOerror
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEerror
</UL>

<P><STRONG><a name="[121]"></a>ecx_readIDNmap</STRONG> (Thumb, 314 bytes, Stack size 208 bytes, ethercatsoe.o(i.ecx_readIDNmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SoEread
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[136]"></a>ecx_readPDOassign</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, ethercatcoe.o(i.ecx_readPDOassign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1516<LI>Call Chain = ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmap
</UL>

<P><STRONG><a name="[137]"></a>ecx_readPDOassignCA</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, ethercatcoe.o(i.ecx_readPDOassignCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOmapCA
</UL>

<P><STRONG><a name="[120]"></a>ecx_readPDOmap</STRONG> (Thumb, 376 bytes, Stack size 88 bytes, ethercatcoe.o(i.ecx_readPDOmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604<LI>Call Chain = ecx_readPDOmap &rArr; ecx_readPDOassign &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassign
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[11f]"></a>ecx_readPDOmapCA</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, ethercatcoe.o(i.ecx_readPDOmapCA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1580<LI>Call Chain = ecx_readPDOmapCA &rArr; ecx_readPDOassignCA &rArr; ecx_SDOread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readPDOassignCA
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_SDOread
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[116]"></a>ecx_readeeprom</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ethercatmain.o(i.ecx_readeeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ecx_readeeprom &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[114]"></a>ecx_readeeprom1</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom1))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ecx_readeeprom1 &rArr; ecx_eeprom2master &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[115]"></a>ecx_readeeprom2</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readeeprom2))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ecx_readeeprom2 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[138]"></a>ecx_readeepromFP</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, ethercatmain.o(i.ecx_readeepromFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
</UL>

<P><STRONG><a name="[ec]"></a>ecx_readstate</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, ethercatmain.o(i.ecx_readstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ecx_readstate &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
</UL>

<P><STRONG><a name="[ee]"></a>ecx_receive_processdata_group</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_receive_processdata_group), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pullindex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata_group
</UL>

<P><STRONG><a name="[f0]"></a>ecx_send_processdata_group</STRONG> (Thumb, 932 bytes, Stack size 88 bytes, ethercatmain.o(i.ecx_send_processdata_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pushindex
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_element_count
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>

<P><STRONG><a name="[f2]"></a>ecx_set_pdo_queue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nicdrv.o(i.ecx_set_pdo_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_set_pdo_queue &rArr; cycle_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_set_pdo_queue
</UL>

<P><STRONG><a name="[fe]"></a>ecx_setbufstat</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nicdrv.o(i.ecx_setbufstat))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[fc]"></a>ecx_setupdatagram</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ethercatbase.o(i.ecx_setupdatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_setupdatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[12f]"></a>ecx_setupnic</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, nicdrv.o(i.ecx_setupnic))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>

<P><STRONG><a name="[11e]"></a>ecx_siiFMMU</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiFMMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ecx_siiFMMU &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[122]"></a>ecx_siiPDO</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siiPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[11c]"></a>ecx_siiSM</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ecx_siiSM &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[11d]"></a>ecx_siiSMnext</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siiSMnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ecx_siiSMnext &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[119]"></a>ecx_siifind</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siifind))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[113]"></a>ecx_siigetbyte</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ethercatmain.o(i.ecx_siigetbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[11a]"></a>ecx_siistring</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, ethercatmain.o(i.ecx_siistring))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[fd]"></a>ecx_srconfirm</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_srconfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>

<P><STRONG><a name="[f4]"></a>ecx_statecheck</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ethercatmain.o(i.ecx_statecheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[13a]"></a>ecx_waitinframe</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nicdrv.o(i.ecx_waitinframe), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[f6]"></a>ecx_writestate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ethercatmain.o(i.ecx_writestate))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
</UL>

<P><STRONG><a name="[142]"></a>ethernetif_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, netconf.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethernetif_init &rArr; ETH_Start &rArr; ETH_MACTransmissionCmd &rArr; ETH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[60]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1908<LI>Call Chain = main &rArr; simpletest &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_usleep
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_Cap_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpletest
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8e]"></a>mcoinit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lan8742a.o(i.mcoinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mcoinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config
</UL>

<P><STRONG><a name="[148]"></a>osal_getSysTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_systick.o(i.osal_getSysTime))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
</UL>

<P><STRONG><a name="[127]"></a>osal_getSysTime_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_systick.o(i.osal_getSysTime_us))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>

<P><STRONG><a name="[12c]"></a>osal_timer_is_expired</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_systick.o(i.osal_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_timer_is_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_getSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[12a]"></a>osal_timer_start</STRONG> (Thumb, 80 bytes, Stack size 36 bytes, bsp_systick.o(i.osal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osal_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_getSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[12b]"></a>osal_usleep</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_systick.o(i.osal_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osal_usleep &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[146]"></a>simpletest</STRONG> (Thumb, 848 bytes, Stack size 24 bytes, main.o(i.simpletest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1884<LI>Call Chain = simpletest &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_readIDNmap &rArr; ecx_SoEread &rArr; ecx_mbxreceive &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_set_pdo_queue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_close
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ALstatuscode2string
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>target_limit_int</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.target_limit_int))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b2]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b1]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_systick.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[84]"></a>ETH_GPIO_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lan8742a.o(i.ETH_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ETH_GPIO_Config &rArr; mcoinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcoinit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[88]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lan8742a.o(i.ETH_MACDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_BSP_Config
</UL>

<P><STRONG><a name="[124]"></a>ecx_parentport</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ethercatdc.o(i.ecx_parentport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[125]"></a>ecx_porttime</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ethercatdc.o(i.ecx_porttime))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[126]"></a>ecx_prevport</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ethercatdc.o(i.ecx_prevport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_prevport
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[139]"></a>ecx_pullindex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ethercatmain.o(i.ecx_pullindex), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[13e]"></a>ecx_pushindex</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ethercatmain.o(i.ecx_pushindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ecx_pushindex
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[12e]"></a>ecx_recvpkt</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nicdrv.o(i.ecx_recvpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[141]"></a>ecx_waitinframe_red</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, nicdrv.o(i.ecx_waitinframe_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ecx_waitinframe_red &rArr; ecx_inframe &rArr; ecx_recvpkt &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_timer_is_expired
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
</UL>

<P><STRONG><a name="[d3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c9]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[d6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
